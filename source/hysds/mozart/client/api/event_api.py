# coding: utf-8

"""
    Mozart API

    API for HySDS job submission and query.  # noqa: E501

    The version of the OpenAPI document: 0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from hysds.mozart.client.api_client import ApiClient
from hysds.mozart.client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class EventApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_add_log_event(self, type, status, event, **kwargs):  # noqa: E501
        """Log HySDS custom event  # noqa: E501

        Logs a HySDS custom event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_add_log_event(type, status, event, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: Event type, e.g. aws_autoscaling, verdi_anomalies (required)
        :param str status: Event status, e.g. spot_termination, docker_daemon_failed (required)
        :param str event: Arbitrary JSON event payload, e.g. {} or {         \"ec2_instance_id\": \"i-07b8989f41ce23880\",         \"private_ip\": \"100.64.134.145\",         \"az\": \"us-west-2a\",         \"reservation\": \"r-02fd006170749a0a8\",         \"termination_date\": \"2015-01-02T15:49:05.571384\"     } (required)
        :param str tags: JSON list of tags, e.g. [\"dumby\", \"test_job\"]
        :param str hostname: Event-related hostname, e.g. \"job.hysds.net\", \"192.168.0.1\"
        :param str x_fields: An optional fields mask
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: HySDSEventLogResponseJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_add_log_event_with_http_info(type, status, event, **kwargs)  # noqa: E501

    def post_add_log_event_with_http_info(self, type, status, event, **kwargs):  # noqa: E501
        """Log HySDS custom event  # noqa: E501

        Logs a HySDS custom event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_add_log_event_with_http_info(type, status, event, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str type: Event type, e.g. aws_autoscaling, verdi_anomalies (required)
        :param str status: Event status, e.g. spot_termination, docker_daemon_failed (required)
        :param str event: Arbitrary JSON event payload, e.g. {} or {         \"ec2_instance_id\": \"i-07b8989f41ce23880\",         \"private_ip\": \"100.64.134.145\",         \"az\": \"us-west-2a\",         \"reservation\": \"r-02fd006170749a0a8\",         \"termination_date\": \"2015-01-02T15:49:05.571384\"     } (required)
        :param str tags: JSON list of tags, e.g. [\"dumby\", \"test_job\"]
        :param str hostname: Event-related hostname, e.g. \"job.hysds.net\", \"192.168.0.1\"
        :param str x_fields: An optional fields mask
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(HySDSEventLogResponseJSON, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'type',
            'status',
            'event',
            'tags',
            'hostname',
            'x_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_add_log_event" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `post_add_log_event`")  # noqa: E501
        # verify the required parameter 'status' is set
        if self.api_client.client_side_validation and ('status' not in local_var_params or  # noqa: E501
                                                        local_var_params['status'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `status` when calling `post_add_log_event`")  # noqa: E501
        # verify the required parameter 'event' is set
        if self.api_client.client_side_validation and ('event' not in local_var_params or  # noqa: E501
                                                        local_var_params['event'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event` when calling `post_add_log_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'event' in local_var_params and local_var_params['event'] is not None:  # noqa: E501
            query_params.append(('event', local_var_params['event']))  # noqa: E501
        if 'tags' in local_var_params and local_var_params['tags'] is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'hostname' in local_var_params and local_var_params['hostname'] is not None:  # noqa: E501
            query_params.append(('hostname', local_var_params['hostname']))  # noqa: E501

        header_params = {}
        if 'x_fields' in local_var_params:
            header_params['X-Fields'] = local_var_params['x_fields']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/event/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HySDSEventLogResponseJSON',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
